import Foundation

/// Represents a report generated by this tool
struct Output: Codable {
    let xcSummary: XCResultSummary
    let failures: [OwnedFailure]
}

struct OutputError: Error {
    let message: String
}

// MARK: - Output Formats

extension Output {
    /// Returns the json representation of the report
    func jsonFormatted() throws -> String {
        let encoder = JSONEncoder()
        encoder.outputFormatting = [.prettyPrinted, .withoutEscapingSlashes, .sortedKeys]
        let data = try encoder.encode(self)
        return String(decoding: data, as: UTF8.self)
    }
}

extension Output {
    /// Returns markdown represention of the report
    func markdownFormatted() -> String {

        let title = switch xcSummary.result {
        case .passed:
            "# ✅ Tests Passed"
        case .failed:
            "# 🚨 Tests Failed"
        case .skipped:
            "# ⏩ Tests Skipped"
        case .expectedFailure:
            "# 🤷 Expected Failures"
        case .unknown:
            "# ⚠️ Unknown"
        }

        let sortedFailures = failures.sorted {
            $0.owners.sorted().joined() < $1.owners.sorted().joined()
        }

        var markdown = """
        
        \(title)
        
        | Total Tests           | \(xcSummary.totalTestCount)   |
        | :-------------------- | :---------------------------- |
        | 🚨 Failed             | \(xcSummary.failedTests)      |
        | ⏩ Skipped            | \(xcSummary.skippedTests)     |
        | 🤷 Expected Failures  | \(xcSummary.expectedFailures) |
        | ✅ Passed             | \(xcSummary.passedTests)      |
        
        
        """

        if failures.isEmpty == false {
            markdown += """
            ## Failures
            
            
            """

            for failure in sortedFailures {

                let testName = failure.xcFailure.testName
                let owners = failure.owners.formatted(.list(type: .and))

                markdown += """
                
                <details>
                  <summary>\(owners) → <b><code>\(testName)</code></b></summary>
                
                  #### Location
                  | \(failure.xcFailure.targetName) | \(failure.xcFailure.testIdentifierString) |
                  | :------------------------------ | :---------------------------------------- |
                  | File                            | \(failure.path ?? "not-found")            |
                  | Line                            | \(failure.line?.formatted() ?? "n/a")     |
                
                  #### Reason
                  ```
                  \(failure.xcFailure.failureText)
                  ```
                
                </details>

                """
            }
        }

        return markdown
    }
}
